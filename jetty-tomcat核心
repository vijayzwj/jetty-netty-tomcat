Jetty服务器基于Handler
    Jetty 的架构从前面的分析可知，它的所有组件都是基于 Handler 来实现。
    从设计模板角度来看 Handler 的设计实际上就是一个责任链模式，接口类 HandlerCollection 可以帮助开发者构建一个链，
    而另一个接口类 ScopeHandler 可以帮助你控制这个链的访问顺序。另外一个用到的设计模板就是观察者模式，用这个设计模式控制了整个 Jetty 的生命周期，
    只要继承了 LifeCycle 接口，你的对象就可以交给 Jetty 来统一管理了。所以扩展 Jetty 非常简单，也很容易让人理解，
    整体架构上的简单也带来了无比的好处，Jetty 可以很容易被扩展和裁剪。

Spring 是面向 Bean 的架构，


MyBATIS 是面向 statement


Tomcat 是以多级容器构建起来的，Tomcat 的整体设计上很复杂，前面说了 Tomcat 的核心是它的容器的设计，
       从 Server 到 Service 再到 engine 等 container 容器，实际上 Tomcat 也有基于责任链的设计方式，像串联 Pipeline 的 Vavle 。
       
 Tomcat 的功能要比 Jetty 强大，因为 Tomcat 已经帮你做了很多工作了，而 Jetty 只告诉，你能怎么做，如何做，有你去实现。
 
从架构上来看 Tomcat 在处理少数非常繁忙的连接上更有优势，也就是说连接的生命周期如果短的话，Tomcat 的总体性能更高。
而 Jetty 刚好相反，Jetty 可以同时处理大量连接而且可以长时间保持这些连接。例如像一些 web 聊天应用非常适合用 Jetty 做服务器，
像淘宝的 web 旺旺就是用 Jetty 作为 Servlet 引擎。 Jetty 默认使用的是 NIO 技术在处理 I/O 请求上更占优势，Tomcat 默认使用的是 BIO，
处理静态资源时，Tomcat 的性能不如 Jetty。
